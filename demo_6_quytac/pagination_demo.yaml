openapi: 3.0.3
info:
  title: Book Pagination API
  description: >
    API demo ba ki·ªÉu ph√¢n trang ph·ªï bi·∫øn v√† t√≠nh nƒÉng th√™m s√°ch ƒë·ªông:
    - **Page-based pagination** (`page`, `pageSize`)
    - **Offset/Limit pagination** (`offset`, `limit`)
    - **Cursor-based pagination** (`cursor`, `limit`)
    - **POST /api/books/add**: th√™m s√°ch m·ªõi, nh·∫≠p th√¥ng tin t·ª´ ng∆∞·ªùi d√πng
  version: "1.1.0"
  contact:
    name: Demo Author
    email: demo@example.com

servers:
  - url: http://localhost:3000
    description: Local development server

paths:
  /api/books/page:
    get:
      summary: Page-based pagination
      description: L·∫•y danh s√°ch s√°ch theo s·ªë trang (`page`, `pageSize`).
      parameters:
        - name: page
          in: query
          description: S·ªë trang c·∫ßn l·∫•y (m·∫∑c ƒë·ªãnh 1)
          schema:
            type: integer
            example: 2
        - name: pageSize
          in: query
          description: S·ªë ph·∫ßn t·ª≠ m·ªói trang (m·∫∑c ƒë·ªãnh 3)
          schema:
            type: integer
            example: 3
      responses:
        "200":
          description: K·∫øt qu·∫£ ph√¢n trang theo trang
          content:
            application/json:
              schema:
                type: object
                properties:
                  pagination:
                    type: object
                    properties:
                      method:
                        type: string
                        example: page-based
                      page:
                        type: integer
                        example: 2
                      pageSize:
                        type: integer
                        example: 3
                      total:
                        type: integer
                        example: 10
                      totalPages:
                        type: integer
                        example: 4
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/Book"

  /api/books/offset:
    get:
      summary: Offset-Limit pagination
      description: L·∫•y danh s√°ch s√°ch b·∫±ng offset v√† limit.
      parameters:
        - name: offset
          in: query
          description: V·ªã tr√≠ b·∫Øt ƒë·∫ßu (b·ªè qua bao nhi√™u ph·∫ßn t·ª≠)
          schema:
            type: integer
            example: 3
        - name: limit
          in: query
          description: S·ªë ph·∫ßn t·ª≠ c·∫ßn l·∫•y
          schema:
            type: integer
            example: 3
      responses:
        "200":
          description: K·∫øt qu·∫£ ph√¢n trang theo offset/limit
          content:
            application/json:
              schema:
                type: object
                properties:
                  pagination:
                    type: object
                    properties:
                      method:
                        type: string
                        example: offset-limit
                      offset:
                        type: integer
                        example: 3
                      limit:
                        type: integer
                        example: 3
                      total:
                        type: integer
                        example: 10
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/Book"

  /api/books/cursor:
    get:
      summary: Cursor-based pagination
      description: L·∫•y danh s√°ch s√°ch d·ª±a tr√™n con tr·ªè (`cursor`, `limit`).
      parameters:
        - name: cursor
          in: query
          description: ID c·ªßa b·∫£n ghi cu·ªëi c√πng ƒë√£ xem
          schema:
            type: string
            example: "3"
        - name: limit
          in: query
          description: S·ªë l∆∞·ª£ng ph·∫ßn t·ª≠ c·∫ßn l·∫•y (m·∫∑c ƒë·ªãnh 3)
          schema:
            type: integer
            example: 3
      responses:
        "200":
          description: K·∫øt qu·∫£ ph√¢n trang theo cursor
          content:
            application/json:
              schema:
                type: object
                properties:
                  pagination:
                    type: object
                    properties:
                      method:
                        type: string
                        example: cursor-based
                      limit:
                        type: integer
                        example: 3
                      current_cursor:
                        type: string
                        example: "3"
                      next_cursor:
                        type: string
                        example: "6"
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/Book"

  /api/books/add:
    post:
      summary: Th√™m s√°ch m·ªõi (cho ph√©p nh·∫≠p d·ªØ li·ªáu)
      description: >
        Th√™m m·ªôt quy·ªÉn s√°ch m·ªõi v√†o danh s√°ch.  
        B·∫°n c√≥ th·ªÉ nh·∫≠p c√°c tr∆∞·ªùng: `title`, `author`, `year`, `category`.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - title
              properties:
                title:
                  type: string
                  example: "Clean Code"
                author:
                  type: string
                  example: "Robert C. Martin"
                year:
                  type: integer
                  example: 2008
                category:
                  type: string
                  example: "Software Engineering"
      responses:
        "201":
          description: S√°ch ƒë∆∞·ª£c th√™m th√†nh c√¥ng
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "üìö Th√™m s√°ch th√†nh c√¥ng"
                  newBook:
                    $ref: "#/components/schemas/Book"
        "400":
          description: Thi·∫øu tr∆∞·ªùng b·∫Øt bu·ªôc (v√≠ d·ª• thi·∫øu title)
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Thi·∫øu ti√™u ƒë·ªÅ s√°ch (title)"

components:
  schemas:
    Book:
      type: object
      properties:
        id:
          type: integer
          example: 5
        title:
          type: string
          example: "Clean Code"
        author:
          type: string
          example: "Robert C. Martin"
        year:
          type: integer
          example: 2008
        category:
          type: string
          example: "Software Engineering"
